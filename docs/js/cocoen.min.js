(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Cocoen = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/koen/Projects/cocoen/src/js/cocoen.js":[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var init = Symbol('init');
var createElements = Symbol('createElements');
var addEventListeners = Symbol('addEventListeners');

var Cocoen = function () {
  function Cocoen(element, options) {
    _classCallCheck(this, Cocoen);

    this.options = Object.assign({}, Cocoen.defaults, options);
    this.element = element || document.querySelector('.cocoen');

    this[init]();
  }

  _createClass(Cocoen, [{
    key: init,
    value: function value() {
      this[createElements]();
      this[addEventListeners]();
      this.dimensions();
    }
  }, {
    key: createElements,
    value: function value() {
      // Create drag element
      var span = document.createElement('span');
      span.className = this.options.dragElementSelector.replace('.', '');
      this.element.appendChild(span);
      // Wrap first image in div
      var wrapper = document.createElement('div');
      var firstImage = this.element.querySelector('img:first-child');
      firstImage.before(wrapper);
      wrapper.append(firstImage);
      // Set class elements we need later
      this.dragElement = this.element.querySelector(this.options.dragElementSelector);
      this.beforeElement = this.element.querySelector('div:first-child');
      this.beforeImage = this.beforeElement.querySelector('img');
    }
  }, {
    key: addEventListeners,
    value: function value() {
      this.element.addEventListener('click', this.onTap.bind(this));
      this.element.addEventListener('mousemove', this.onDrag.bind(this));
      this.element.addEventListener('touchmove', this.onDrag.bind(this));
      this.dragElement.addEventListener('mousedown', this.onDragStart.bind(this));
      this.dragElement.addEventListener('touchstart', this.onDragStart.bind(this));

      window.addEventListener('mouseup', this.onDragEnd.bind(this));
      window.addEventListener('resize', this.dimensions.bind(this));
    }
  }, {
    key: 'onTap',
    value: function onTap(e) {
      e.preventDefault();

      this.leftPos = e.pageX ? e.pageX : e.originalEvent.touches[0].pageX;
      this.requestDrag();
    }
  }, {
    key: 'onDragStart',
    value: function onDragStart(e) {
      e.preventDefault();

      var startX = e.pageX ? e.pageX : e.originalEvent.touches[0].pageX;
      var offsetLeft = this.dragElement.getBoundingClientRect().left + document.body.scrollLeft;
      this.posX = offsetLeft + this.dragElementWidth - startX;
      this.isDragging = true;
    }
  }, {
    key: 'onDragEnd',
    value: function onDragEnd(e) {
      e.preventDefault();
      this.isDragging = false;
    }
  }, {
    key: 'onDrag',
    value: function onDrag(e) {
      e.preventDefault();

      if (!this.isDragging) {
        return;
      }

      this.moveX = e.pageX ? e.pageX : e.originalEvent.touches[0].pageX;
      this.leftPos = this.moveX + this.posX - this.dragElementWidth;

      this.requestDrag();
    }
  }, {
    key: 'dimensions',
    value: function dimensions() {
      this.elementWidth = parseInt(window.getComputedStyle(this.element).width, 10);
      this.elementOffsetLeft = this.element.getBoundingClientRect().left + document.body.scrollLeft;
      this.beforeImage.style.width = this.elementWidth + 'px';
      this.dragElementWidth = parseInt(window.getComputedStyle(this.dragElement).width, 10);
      this.minLeftPos = this.elementOffsetLeft + 10;
      this.maxLeftPos = this.elementOffsetLeft + this.elementWidth - this.dragElementWidth - 10;
    }
  }, {
    key: 'drag',
    value: function drag() {
      if (this.leftPos < this.minLeftPos) {
        this.leftPos = this.minLeftPos;
      } else if (this.leftPos > this.maxLeftPos) {
        this.leftPos = this.maxLeftPos;
      }

      var openRatio = this.leftPos + this.dragElementWidth / 2 - this.elementOffsetLeft;
      openRatio /= this.elementWidth;
      var width = openRatio * 100 + '%';

      this.dragElement.style.left = width;
      this.beforeElement.style.width = width;

      if (this.options.dragCallback) {
        this.options.dragCallback(openRatio);
      }
    }
  }, {
    key: 'requestDrag',
    value: function requestDrag() {
      window.requestAnimationFrame(this.drag.bind(this));
    }
  }]);

  return Cocoen;
}();

Cocoen.defaults = {
  dragElementSelector: '.cocoen__drag',
  dragCallback: null
};

module.exports = Cocoen;

},{}]},{},["/Users/koen/Projects/cocoen/src/js/cocoen.js"])("/Users/koen/Projects/cocoen/src/js/cocoen.js")
});

//# sourceMappingURL=cocoen.min.js.map
